通过属性文件外置配置
一、自动配置微调
Spring Boot自动配置的Bean提供了300多个用于微调的属性
Spring Boot应用程序有多种设置途径。Spring Boot能从多种属性源获得属性，包括如下几处。
    (1) 命令行参数
    (2)  java:comp/env 里的JNDI属性
    (3) JVM系统属性
    (4) 操作系统环境变量
    (5) 随机生成的带 random.* 前缀的属性（在设置其他属性时，可以引用它们，比如 ${random.long} ）
    (6) 应用程序以外的application.properties或者appliaction.yml文件
    (7) 打包在应用程序内的application.properties或者appliaction.yml文件
    (8) 通过 @PropertySource 标注的属性源
    (9) 默认属性
这个列表按照优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相同属性。
    例如，命令行参数会覆盖其他属性源里的属性。

application.properties和application.yml文件能放在以下四个位置。
    (1) 外置，在相对于应用程序运行目录的/config子目录里。
    (2) 外置，在应用程序运行的目录里。
    (3) 内置，在config包内。
    (4) 内置，在Classpath根目录。
    同样，这个列表按照优先级排序。也就是说，/config子目录里的application.properties会覆盖应用程序Classpath里的application.properties中的相同属性。
    此外，如果你在同一优先级位置同时有application.properties和application.yml，那么application.yml里的属性会覆盖application.properties里的属性。
    禁用ascii-art Banner只是使用属性的一个小例子。让我们再看几个例子，看看如何通过常用途径微调自动配置的Bean。

自动配置微调
  1. 禁用模板缓存
   缓存: Spring Boot支持的其他模板也能关闭模板缓存
         spring.thymeleaf.cache (Thymeleaf)
         spring.freemarker.cache （Freemarker）
         spring.groovy.template.cache （Groovy模板）
         spring.velocity.cache （Velocity）
   默认情况下，这些属性都为 true ，也就是开启缓存。将它们设置为 false 即可禁用缓存
  2. 配置嵌入式服务器
      让服务器监听不同的端口，你所要做的就是设置 server.port 属性。
          要是只改一次，可以用命令行参数：
                $ java -jar readinglist-0.0.1-SNAPSHOT.jar --server.port=8000
          希望端口变更时间更长一点，可以在其他支持的配置位置上设置server.port。
                例如,把它放在应用程序Classpath根目录的application.yml文件里：
                server:
                    port: 8000
      让服务器提供HTTPS服务。
          第一步就是用JDK的keytool 工具来创建一个密钥存储（keystore）：
                $keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA
      该工具会询问几个与名字和组织相关的问题，大部分都无关紧要。但在被问到密码时，一定要记住你的选择。
            在本例中，我选择letmein作为密码。
      现在只需要设置几个属性就能开启嵌入式服务器的HTTPS服务了。可以把它们都配置在命令行里，但这样太不方便了。
            可以把它们放在application.properties或application.yml里。在application.yml中，它们可能是这样的：
                server:
                    port: 8443
                    ssl:
                        key-store: file:///path/to/mykeys.jks
                    key-store-password: letmein
                    key-password: letmein
  3. 配置日志
    Maven 排除 springBoot默认logback日志记录 替换 对应日志记录
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j</artifactId>
        </dependency>
    要完全掌握日志配置 可以在Classpath的根目录（src/main/resources）里创建logback.xml文件
        <configuration>
            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>
                        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
                    </pattern>
                </encoder>
            </appender>

            <logger name="root" level="INFO"/>

            <root level="INFO">
                <appender-ref ref="STDOUT" />
            </root>
        </configuration>
    使用springboot修改日志级别和指定日志输出的文件 在application.yml里加入以下内容：
        logging:
            level:
                root: WARN
                org:
                    springframework:
                        security: DEBUG
        另外，你也可以把Spring Security的包名写成一行：
        logging:
            level:
                root: WARN
                org.springframework.security: DEBUG
    现在，假设你想把日志写到位于/var/logs/目录里的BookWorm.log文件里。使用 logging.path 和 loggin.file 属性就行了：
        logging:
            path: /var/logs/
            file: BookWorm.log
            level:
                root: WARN
                org:
                    springframework:
                        security: DEBUG
    假设应用程序有/var/logs/的写权限，日志就能被写入/var/logs/BookWorm.log。默认情况下，日志文件的大小达到10MB时会切分一次。
        与之类似，这些属性也能在application.properties里设置：
        logging.path=/var/logs/
        logging.file=BookWorm.log
        logging.level.root=WARN
        logging.level.root.org.springframework.security=DEBUG
    如果你还是想要完全掌控日志配置，但是又不想用logback.xml作为Logback配置的名字，可以通过 logging.config 属性指定自定义的名字：
        logging:
            config:
                classpath:logging-config.xml
  4.配置数据源
    MySQL数据库    application.yml配置
        spring:
            datasource:
                url: jdbc:mysql://localhost/readinglist
                username: dbuser
                password: dbpass
                driver-class-name: com.mysql.jdbc.Driver (通常Spring Boot会根据数据库URL自动识别出需要的驱动，识别出错可手动配置)
    在自动配置 DataSource Bean的时候，Spring Boot会使用这里的连接数据。
        DataSource Bean是一个连接池，如果Classpath里有Tomcat的连接池DataSource，那么就会使用这个连接池；
        否则，Spring Boot会在Classpath里查找自动配置支持的以下连接池：
              HikariCP
              Commons DBCP
              Commons DBCP 2
        你还可以自己配置 DataSource Bean，使用你喜欢的各种连接池。
        你也可以设置 spring.datasource.jndi-name 属性，从JNDI里查找 DataSource ：
            spring:
                datasource:
                    jndi-name: java:/comp/env/jdbc/readingListDS
        一旦设置了 spring.datasource.jndi-name 属性，其他数据源连接属性都会被忽略，除非没有设置别的数据源连接属性。
二、应用程序 Bean 的配置外置
        增加推荐费 ReadingListController
     @ConfigurationProperties 注解，这说明该Bean的属性应该是（通过setter方法）从配置属性值注入的。
        ReadingListController 的属性应该从带 amazon 前缀的配置属性中进行注入。
         ReadingListController 只有一个setter方法，就是设置 associateId 属性用的setter方法。
         因此，设置Amazon Associate ID唯一要做的就是添加 amazon.associateId 属性，把它加持的任一属性源位置里即可。
            例如，我们可以在application.properties里设置该属性：
                amazon.associateId=habuma-20
            或者在application.yml里设置：
                amazon:
                    associateId: habuma-20
      开启配置属性 从技术上来说， @ConfigurationProperties 注解不会生效，除非先向Spring配置类添加 @EnableConfigurationProperties 注解。
        但通常无需这么做，因为Spring Boot自动配置后面的全部配置类都已经加上了 @EnableConfigurationProperties 注解。
        因此，除非你完全不使用自动配置（那怎么可能？），否则就无需显式地添加 @EnableConfigurationProperties 。
     还有一点需要注意，Spring Boot的属性解析器非常智能，它会自动把驼峰规则的属性和使用连字符或下划线的同名属性关联起来。
        换句话说， amazon.associateId 这个属性和amazon.associate_id 以及 amazon.associate-id 都是等价的。用你习惯的命名规则就好。










